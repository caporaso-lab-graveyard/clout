===============================
Automated Testing System README 
===============================

############
Introduction
############

This system executes any number of test suites using Amazon's EC2 service and
emails the results to a predefined list of recipients. StarCluster is used to
boot up a cluster on the EC2 and the test suites are executed on the cluster.
This has the advantage of freeing up locally-maintained systems from running
computationally-intensive processes, allowing the heavy work to be done on
Amazon's always-available and reliable EC2 service. The type of compute node
that the tests are run on is also configurable, which has the advantage of
flexibility and scalability, allowing you to easily choose the right hardware
for the timely execution of your test suites.

This system is designed to be used in a command scheduler program (such as
cron) in order to automatically execute a suite of unit tests and email the
results to a list of recipients. Thus, you will only interact with a single
script (run_test_suites.py) to set up, run your test suites, and email the
results. This script can be easily added to a crontab so that you can receive
test suite results every night, for example.

Please refer to the INSTALL file for details on how to set up the system.

#########################
Input Configuration Files
#########################

The automated testing system requires four different configuration files.
Examples of each type of file can be found under the 'config' directory.

1) Test suite configuration file

This file contains tab-separated fields describing each test suite that will be
run by the automated testing system. All fields are required. The test suites
will be executed in the order that they appear in this file.

The first field is the label/name of the test suite, as it will appear in the
email summary. This field can be virtually any human-readable string that will
be used to identify the test suite. This field must be unique across all
entries in this file.

The second field is the set of commands that will be executed to run the test
suite on the cluster. This includes any setup commands (e.g. sourcing a shell
script, svn updating a checkout to ensure you're testing the latest and
greatest changes, etc.) that need to be run before the test suite is executed.
All stdout and stderr will be logged for these commands and included in the
email. It is recommended that you use absolute paths for all of the filepaths.
It is also recommended to use '&&' to separate the commands so that the
commands will abort at the first failure and return that exit code instead of
trying to continue on. This way you'll be able to see the first thing that
failed and not waste money paying for EC2 compute power that ultimately won't
prove useful.

IMPORTANT: The commands that are executed should follow the Unix standard for
return codes (a return code of zero indicates success, anything else indicates
failure). The automated testing system uses the return codes to determine
whether or not there was a problem in executing any of the commands, as well as
to determine the status of the test suites themselves. Thus, if a test fails,
make sure your test suite executable returns a non-zero return code, and
likewise, if all tests pass, your test suite executable should return zero for
success.

2) StarCluster configuration file

This file is the StarCluster configuration file that the automated testing
system will use when booting up a cluster. This file contains important
information regarding your Amazon EC2 account, the cluster template to use for
running the tests on, etc.. Please refer to http://web.mit.edu/star/cluster/
for instructions on how to set up a StarCluster configuration file.

IMPORTANT: The automated testing system currently only uses a single master
node on the cluster to execute the test suites on (the test suites are executed
one after another). Thus, you'll only need a single-node cluster defined in
your cluster template (see the example config file for more details).

TIP: Make sure the RSA key that this config file points to is in the correct
location and has the right permissions (e.g. chmod 400 key.rsa).

3) Email recipients configuration file

This file contains a list of email addresses (one per line) of the individuals
who should receive an email of the testing results.

4) Email settings configuration file

This file contains four key/value pairs (each separated by a tab) that define
how the automated testing system should send the email. The fields
'smtp_server', 'smtp_port', 'sender', and 'password' must be defined. The
'sender' field is the email address that will show up in the 'From' field in
the email, and it is also used to log into the SMTP server in conjunction with
the 'password' field.

##############
Usage Examples
##############

Example 1: Execute unit test suites remotely

Executes the unit test suites defined in the input configuration file as the
'ubuntu' user and emails the test results to everyone in the provided email
list. The default starcluster template is used (as is defined in the input
starcluster config file) and the starcluster cluster tag is 'nightly_tests'.

Command:
run_test_suites.py -i config/test_suite_config.txt -s config/starcluster_config
  -u ubuntu -c nightly_tests -l config/recipients.txt
  -e config/email_settings.txt

Example 2: Execute suites remotely using a custom starcluster cluster template

Executes the test suites using a custom starcluster cluster template
'test-cluster' instead of the default cluster template in the starcluster
config file.

Command:
run_test_suites.py -i config/test_suite_config.txt -s config/starcluster_config
  -u ubuntu -c nightly_tests -l config/recipients.txt
  -e config/email_settings.txt -t test-cluster
